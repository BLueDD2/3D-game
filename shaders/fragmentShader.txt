#version 400 core


in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 FragColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main()
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecualr = vec3(0.0);
	
	float distance = length(toLightVector[0]);
	float attFactor = attenuation[0].x + (attenuation[0].y * distance) + (attenuation[0].z * distance * distance);
	vec3 unitLightVector = normalize(toLightVector[0]);
	float nDot1 = max(dot(unitNormal, unitLightVector), 0.0);
	vec3 reflectedLightDirection = reflect(-unitLightVector,unitNormal);
	float specularFactor = max(dot(reflectedLightDirection, unitVectorToCamera), 0.0);
	float damperFactor = pow(specularFactor, shineDamper);
	totalDiffuse = totalDiffuse + (nDot1 * lightColor[0]) / attFactor;
	totalSpecualr = totalSpecualr + (damperFactor *reflectivity * lightColor[0])/ attFactor;

	
	totalDiffuse = max(totalDiffuse, 0.2);

	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if(textureColor.a < 0.5){
		discard;
	}

    FragColor = vec4(totalDiffuse,1.0) * texture(textureSampler, pass_textureCoords) + vec4(totalSpecualr,1.0);
    FragColor = mix(vec4(skyColor,1.0), FragColor, visibility);
}